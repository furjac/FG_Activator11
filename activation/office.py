"""
MIT License

Copyright (c) 2023 Furjack

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
import tempfile
import subprocess
import base64
import os
import time

encoded_cmdline = ''

def activate_office():
    decoded_bytes = base64.b64decode(encoded_cmdline)
    decoded_str = decoded_bytes.decode('utf-8')

    with tempfile.NamedTemporaryFile(mode='w+', suffix='.bat', delete=False) as temp_file:
        temp_file.write(decoded_str)

    try:
        process = subprocess.Popen([temp_file.name], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        process.wait()

        if process.returncode != 0:
            print(f"Error while running the script: {stderr.decode('utf-8')}")

    except Exception as e:
        print(f"Error: {e}")

    time.sleep(1)

    os.remove(temp_file.name)